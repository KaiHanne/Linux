#!/bin/bash
################################################################################
#
#       $Header: /home/oracle/itassist/bin/RCS/libdbcommon.sh,v 1.1 2009/06/11 11:36:53 oracle Exp oracle $
#
#         Name : libdbcommon.sh
#        About : <About> 
#
#     $Revision: 0.1.0$
#
#   Author(s)  : Gert J. Willems <gjwillems@gmail.com>
#
#   Parameters : [MANDATORY!]
#
#                [OPTIONAL]
#
# Dependencies : 
#
#
# ------------------------------------------------------------------------------
# $Log: libdbcommon.sh,v $
# Revision 1.1  2009/06/11 11:36:53  oracle
# Initial revision
#
# ------------------------------------------------------------------------------ 
# ============================================================================== 
# History
# Date     Rev   Author      What?
# -------- ----- ----------- ---------------------------------------------------
# 20170929 0.1.0 gjwillems   created, commons separated from liboracle.sh and
#                            libpostgres.sh
#
# ------------------------------------------------------------------------------
#                        COPYRIGHT (C) 2000-2017, ITASSIST 
################################################################################
# set -xv

# ====== Aliasses  =============================================================
# ---- Local variables and initialisation --------------------------------------
#
TS=$(date +"%T %F")

source "${GLOBAL_LIB:-/data/shared/global/lib}/libgeneric.sh"

# ==============================================================================
# show version information of this library
# ---------------------------V--------------------------------------------------
function libdbcommon_version() { ## print the current liboracle version
   local _self_=${FUNCNAME[0]}
   local LIB="libdbcommon.sh"
   local LB_REV="$Revision: 0.1.0 $" 
   local LB_REV_DATE="Fri Sep 29 09:54:45 CEST 2017"

   printf "%s revision %s build: %s\n" "${LIB}" "${LB_REV}" "${LB_REV_DATE}"
}

# ==============================================================================
# bash init set the specific enviroment Oracle or Postgres
# ---------------------------V--------------------------------------------------
function _dbinit_() {      ## init the bashlib
   local _self_=${FUNCNAME[0]}

   ctr=0
   # We base the environment on the existance of the TAB files in /etc
   if [ -s /etc/oratab ]; then
      export ORATAB="/etc/oratab"
      ((ctr+=1))
   fi
   if [ -s /etc/pgtab ]; then
      export PGTAB="/etc/pgtab"
      ((ctr+=2))
   fi
   case ${ctr} 
   in
      0) ENV_DESC="No Oracle and PostgreSQL found" ;; 
      1) ENV_DESC="Oracle Database Server" ;; 
      2) ENV_DESC="PostgreSQL Database Server" ;; 
      3) ENV_DESC="Oracle and PostgreSQL Database Server" ;; 
   esac
   export ENV_DESC
}

# ==============================================================================
# check routine "is"
# ---------------------------V--------------------------------------------------
function is() {              ## get a true or false for specified DB Vendor
   local _self_=${FUNCNAME[0]}
   system=$(lower "${1}")
   
   case ${system}
   in
        oracle) [[ ! -z ${ORATAB} ]] && return 0 ;;
      postgres)	[[ ! -z ${PGTAB}  ]] && return 0 ;;
           prd) if [ ! -z ${PGTAB}  ]; then 
                   grep -qw prd ${PGTAB} 
                   if [ $? -eq 0 ]; then
                      return 0
                   else
                      return 1
                   fi
                fi ;;
   esac

   printf "Sorry, this is a ${ENV_DESC}\n"
   return 1
}

# ==============================================================================
# basic initialisation of script instance: validate script command completion
# lists etc.
# ------------------------------------------------------------------------------
function _init_cli_ {
   local _fname_=${FUNCNAME[0]}

   [[ -z ${GLOBAL_SQL} ]] && return 0

   printf "# ----------------------------------------------------------------\n"
   printf "# %s\n" "$(version)"
   printf "# \n"
   printf "# File: %s\n" "${ccl_file}"
   printf "# \n"
   printf "# generated by %s @ %s\n" ${mod} "$(date)"
   printf "# ----------------------------------------------------------------\n"

   for path in $(printf "%s\n" $(printf "%s\n" ${GLOBAL_SQL}|sed 's/:/ /g' ))
   do
      for file in $(ls -1 ${path}/ | fgrep '.sql' | sed 's/\.sql//g' | sort)
      do
         arguments=$(grep ^"-- ::" ${path}/${file}.sql | sed 's/-- ::/::/g');
         printf "${file} ${arguments}\n"
      done
   done
   return 0
}

# ==============================================================================
# List all functions in $0 (this lib)
# ---------------------------V--------------------------------------------------
function libdbcommon() {       ## Show all the defined functions in liboracle.sh
   echo
   version
   printf "\nFunction          Description"
   printf "\n--------          ----------------------------------------------------\n"

   grep -i ^"function [a-z]" ${GLOBAL_LIB}/${LIB} | \
   egrep -v "^EOS|^TS|^declare" | \
   sed 's/function //g' | \
   sed 's/()//g'        | \
   sed 's/{/ /g'        | \
   sort 
   echo 
}

# ==============================================================================
# simpele bericht afhandelings functie
# ------------------------------------------------------------------------------
function out {
   pmsg="${1}"
   [[ ${quiet} -eq 0 ]] && printf "%s\n" "${pmsg}" && return
}

# ==============================================================================
# zet de prompt met timing info
# ------------------------------------------------------------------------------
function set_ps {
   # zet timer prompt
   dprompt='${DATUM}-${mod}'
   date_prompt=1
}

# ==============================================================================
# signal handler
# ------------------------------------------------------------------------------
function sigquit {
   echo exit
   exit 0
}

# ==============================================================================
# get number of terminal columns
# ------------------------------------------------------------------------------
function columns {
   local _fname_=${FUNCNAME[0]}
   export columns=$(stty -a | grep columns | cut -d ';' -f 3| awk '{ printf "%s",$2 }')
   return 0
}

# ==============================================================================
# show all sql scripts that are available
# create a dynamic list based on screen size i.e. 1, 2 or 3 column output
# ------------------------------------------------------------------------------
function list () {
   local _fname_=${FUNCNAME[0]}
   # set -xv
   columns
   [[ ${columns} -gt 210 ]] && export columns=207 && stty columns ${columns}

   # determine number of columns to print
   if [ ${columns} -eq 207 ]; then
      cols=3
   elif [ ${columns} -le 130 ]; then
      cols=1
   else
      cols=2
   fi

   ((x=columns/cols))
   ((x=x-23))
   ((x=x))

   printf "\n\033[1m\033[34mAvailable ${DB_VENDOR} sql commands are:\033[0m\n"
   ((hrr=columns-0))
   hr ${hrr} 1

   c=0
   cat ${ccl_file} | grep -v ^# | sort| while read line
   do
      ary=(${line})
      prc=${ary[0]}
      ary=(${ary[@]/${ary[0]}})
      [[ ${c} -eq ${cols} ]] && c=0 && printf "|\n"
      printf "| %20.20s " "${prc}"; $(echo eval printf "%-$x.${x}s" \"${ary[*]}\")
      ((c+=1))
   done
   printf "|\n"
   hr ${hrr} 0 \|
   printf "\n| Notes: argument = mandatory, [argment] = optional, "
   printf "(l) = like-oparator in use"
   [[ ${DB_VENDOR} == "postgres" ]] && printf \
      "; PostgreSQL commands: \\\\\<command>"
   printf "\n"
   hr ${hrr} 1
   printf "\n\n"
   return 0
}

# ==============================================================================
# rebuild the ccl file for list command
# ------------------------------------------------------------------------------
function build_list () {
   local _fname_=${FUNCNAME[0]}
   local _quiet_=${1:-0}

   cp ${ccl_file} ${ccl_file}.$$
   _init_cli_ > ${ccl_file}
   
   diff -q -I '# generated by' ${ccl_file} ${ccl_file}.$$ 1>/dev/null
   rv=${?}
   [[ ${rv} -eq 0 ]] && rm -f ${ccl_file}.$$

   [[ ${_quiet_} -eq 1 ]] && [[ ${rv} -ne 0 ]] && \
   out "${_fname_} - Command completion file (re)build, backup in [${ccl_file}.$$]"

   return 0
}

# ==============================================================================
# SQL Shell SUB
# ------------------------------------------------------------------------------
function _shell_settings_() {
   local _fname_=${FUNCNAME[0]}

   [[ -z ${DB_VENDOR} ]] && printf "DB Vendor not set, defaults to: " \
                         && export DB_VENDOR=${dfltype} \
                         && echo ${DB_VENDOR}
   [[ ${date_prompt} -eq 1 ]] && DATUM=$(date +"%Y-%m-%d_%H:%M:%S")

   case ${DB_VENDOR}
   in
        oracle) # try 2 use ORACLE_SID
                eval "prompt=\"${dprompt}@\"\"${ORACLE_SID}> \"" ;;
      postgres) # try 2 use PGINSTANCE
                eval "prompt=\"${dprompt}@\"\"${PGINSTANCE}> \"" ;;
   esac
}

# ==============================================================================
# Guess what...
# ------------------------------------------------------------------------------
function void () {
   return
}

# Call then init proc
_dbinit_
# ==============================================================================
# ----- export the functions
_export_functions_
# ----- enf of functions.lib ------------------------------------------------------

